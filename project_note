how to set-up CLOUDINARY for project to upload photo:
======================================================
1.create an account in cloudinary then log-in
2.then click on the profile icon which is display in left-side bottom of the page and click 
3.myprofile =>click on upload text =>move down and clickadd upload_preset

    i. gives Upload preset name 
    ii.signin mode : unsigned
    iii.gives asset folder name
    iv check overwrte botton turn on find in default
    v. click save botton

    5. come to code page and set the following


    .env file:
    ===========
    VITE_CLOUDINARY_CLOUD_NAME=decg6vvjo

    uploadFile function use to upload photo to cloudinary:
    =======================================================
    const uploadFile = async (file) => {
    setLoading(true);
    setError(null);
    // setData(null);
    // console.log(file); // Log the file object for debugging

    const cloudName = import.meta.env.VITE_CLOUDINARY_CLOUD_NAME;
    if (!cloudName) {
      setError('Cloudinary cloud name is not set in environment variables.');
      setLoading(false);
      return;
    }

    const url = `https://api.cloudinary.com/v1_1/${cloudName}/auto/upload`;
    const formData = new FormData();
    formData.append('file', file);
    formData.append('upload_preset', 'connect-me-file');

    // Log formData for debugging
    // for (var pair of formData.entries()) {
    //   console.log(`${pair[0]}: ${pair[1]}`);
    // }

    try {
      const response = await fetch(url, {
        method: 'POST',
        body: formData,
      });
      
      if (!response.ok) {
        const errorResponse = await response.json();
        console.log(`Failed to upload file: ${errorResponse.error.message}`)
        throw new Error(`Failed to upload file: ${errorResponse.error.message}`);
      }

      const responseData = await response.json();
      // console.log(" responseData"+ JSON.stringify(responseData));
      setData(responseData);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };
    